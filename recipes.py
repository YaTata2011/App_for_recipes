# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'rozum.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets

from PyQt5.QtCore import Qt
from PyQt5.QtWidgets import QApplication, QWidget, QPushButton, QLabel, QListWidget, QLineEdit, QTextEdit, QInputDialog, QHBoxLayout, QVBoxLayout, QFormLayout
import sys

import json
 


 
# '''Замітки в json'''
# notes = {
#     "Ласкаво просимо!" : {
#         "текст" : "Це найкращий додаток для заміток у світі!",
#         "теги" : ["добро"]
#     }
# }
# with open("notes_data.json", "w") as file:
#     json.dump(notes, file, ensure_ascii= False, indent=4)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(0, 0, 361, 551))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.text_zamitki = QtWidgets.QTextEdit(self.verticalLayoutWidget)
        self.text_zamitki.setObjectName("text_zamitki")
        self.verticalLayout.addWidget(self.text_zamitki)
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(360, 30, 311, 171))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.listWidget_zametki = QtWidgets.QListWidget(self.verticalLayoutWidget_2)
        self.listWidget_zametki.setObjectName("listWidget_zametki")
        self.verticalLayout_2.addWidget(self.listWidget_zametki)
        self.verticalLayoutWidget_3 = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget_3.setGeometry(QtCore.QRect(360, 320, 311, 121))
        self.verticalLayoutWidget_3.setObjectName("verticalLayoutWidget_3")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_3)
        self.verticalLayout_3.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.list_tegi = QtWidgets.QListWidget(self.verticalLayoutWidget_3)
        self.list_tegi.setObjectName("list_tegi")
        self.verticalLayout_3.addWidget(self.list_tegi)
        self.btn_create = QtWidgets.QPushButton(self.centralwidget)
        self.btn_create.setGeometry(QtCore.QRect(370, 220, 141, 31))
        self.btn_create.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_create.setObjectName("btn_create")
        self.btn_del = QtWidgets.QPushButton(self.centralwidget)
        self.btn_del.setGeometry(QtCore.QRect(530, 220, 141, 31))
        self.btn_del.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_del.setObjectName("btn_del")
        self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        self.btn_save.setGeometry(QtCore.QRect(370, 260, 301, 31))
        self.btn_save.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_save.setObjectName("btn_save")
        self.lineEdit_create_teg = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_create_teg.setGeometry(QtCore.QRect(380, 450, 271, 21))
        self.lineEdit_create_teg.setObjectName("lineEdit_create_teg")
        self.btn_del_teg = QtWidgets.QPushButton(self.centralwidget)
        self.btn_del_teg.setGeometry(QtCore.QRect(530, 480, 141, 31))
        self.btn_del_teg.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_del_teg.setObjectName("btn_del_teg")
        self.btn_add_teg = QtWidgets.QPushButton(self.centralwidget)
        self.btn_add_teg.setGeometry(QtCore.QRect(370, 480, 141, 31))
        self.btn_add_teg.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_add_teg.setObjectName("btn_add_teg")
        self.btn_search_teg = QtWidgets.QPushButton(self.centralwidget)
        self.btn_search_teg.setGeometry(QtCore.QRect(370, 520, 301, 31))
        self.btn_search_teg.setStyleSheet("background-color: rgb(255, 214, 62);")
        self.btn_search_teg.setObjectName("btn_search_teg")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(370, 10, 291, 21))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(370, 300, 301, 16))
        self.label_2.setObjectName("label_2")
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "КНИГА РЕЦЕПТІВ"))
        self.btn_create.setText(_translate("MainWindow", "Створити рецепт"))
        self.btn_del.setText(_translate("MainWindow", "Видалити рецепт"))
        self.btn_save.setText(_translate("MainWindow", "Зберегти рецепт"))
        self.lineEdit_create_teg.setPlaceholderText(_translate("MainWindow", "Введіть тег..."))
        self.btn_del_teg.setText(_translate("MainWindow", "Відкріпити від рецепту"))
        self.btn_add_teg.setText(_translate("MainWindow", "Додати до рецепту"))
        self.btn_search_teg.setText(_translate("MainWindow", "Шукати рецепт за тегом"))
        self.label.setText(_translate("MainWindow", "Список рецептів"))
        self.label_2.setText(_translate("MainWindow", "Список тегів"))


        
        def show_note():
         # отримуємо текст із замітки з виділеною назвою та відображаємо його в полі редагування
            key = self.listWidget_zametki.selectedItems()[0].text()
            print(key)
            self.text_zamitki.setText(notes[key]["текст"])
            self.list_tegi.clear()
            self.list_tegi.addItems(notes[key]["теги"])
        
        self.listWidget_zametki.itemClicked.connect(show_note)
        
        
        def add_note():
            note_name, ok = QInputDialog.getText(MainWindow, "Додати рецепт", "Назва рецепту: ")
            if ok and note_name != "":
                notes[note_name] = {"текст" : "", "теги" : []}
                self.listWidget_zametki.addItem(note_name)
                self.list_tegi.addItems(notes[note_name]["теги"])
                print(notes)   

        
        self.btn_create.clicked.connect(add_note) 

        def save_note():
            if self.listWidget_zametki.selectedItems():
                key = self.listWidget_zametki.selectedItems()[0].text()
                notes[key]["текст"] = self.text_zamitki.toPlainText()
                with open("notes_data.json", "w") as file:
                    json.dump(notes, file, sort_keys=True, ensure_ascii=False)
                print(notes)
            else:
                print("Рецепт для збереження не вибран!")

        self.btn_save.clicked.connect(save_note)

        def del_note():
            if self.listWidget_zametki.selectedItems():
                key = self.listWidget_zametki.selectedItems()[0].text()
                del notes[key]
                self.listWidget_zametki.clear()
                self.list_tegi.clear()
                self.text_zamitki.clear()
                self.listWidget_zametki.addItems(notes)
                with open("notes_data.json", "w") as file:
                    json.dump(notes, file, sort_keys=True, ensure_ascii=False)
                print(notes)
            else:
                print("Рецепт для вилучення не обран!")

        self.btn_del.clicked.connect(del_note)


        def search_tag():
            print(self.btn_search_teg.text())
            tag = self.lineEdit_create_teg.text()
            if self.btn_search_teg.text() == "Шукати рецепт за тегом" and tag:
                print(tag)
                notes_filtered = {} # тут будуть замітки з виділеним тегом
                for note in notes:
                    if tag in notes[note]["теги"]: 
                        notes_filtered[note]=notes[note]
                self.btn_search_teg.setText("Скинути пошук")
                self.listWidget_zametki.clear()
                self.list_tegi.clear()
                self.text_zamitki.clear()
                self.listWidget_zametki.addItems(notes_filtered)
                print(self.btn_search_teg.text())
            elif self.btn_search_teg.text() == "Скинути пошук":
                self.lineEdit_create_teg .clear()
                self.listWidget_zametki.clear()
                self.list_tegi.clear()
                self.text_zamitki.clear()
                self.listWidget_zametki.addItems(notes)
                self.btn_search_teg.setText("Шукати рецепт за тегом")
                print(self.btn_search_teg.text())
            else:
                pass  
        
        self.btn_search_teg.clicked.connect(search_tag)

        def add_tag():
            if self.listWidget_zametki.selectedItems():
                key = self.listWidget_zametki.selectedItems()[0].text()
                tag = self.lineEdit_create_teg.text()
                if not tag in notes[key]["теги"]:
                    notes[key]["теги"].append(tag)
                    self.list_tegi.addItem(tag)
                    self.lineEdit_create_teg.clear()
                with open("notes_data.json", "w") as file:
                    json.dump(notes, file, sort_keys=True, ensure_ascii=False)
                print(notes)
            else:
                print("Рецепт для додавання тега не обран!")
 
        
        self.btn_add_teg.clicked.connect(add_tag)
        
        
        def del_tag():
            if self.list_tegi.selectedItems():
                key = self.listWidget_zametki.selectedItems()[0].text()
                tag = self.list_tegi.selectedItems()[0].text()
                notes[key]["теги"].remove(tag)
                self.list_tegi.clear()
                self.list_tegi.addItems(notes[key]["теги"])
                with open("notes_data.json", "w") as file:
                    json.dump(notes, file, sort_keys=True, ensure_ascii=False)
            else:
                print("Тег для вилучення не обраний!")
        
            
        self.btn_del_teg.clicked.connect(del_tag)
        
        
        
        
        
        
        
        
        with open("notes_data.json", "r") as file:
            notes = json.load(file)
        self.listWidget_zametki.addItems(notes)


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
 
    sys.exit(app.exec_())
